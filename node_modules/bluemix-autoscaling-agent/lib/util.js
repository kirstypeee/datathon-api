'use strict';
module.exports = function() {
  var url = require('url');
  var fs = require('fs');
  var path = require("path");
  var logger = require(path.join(__dirname, 'logger.js'))();
  var utilObj = {};
  utilObj.getApplicationEnv = function() {
    var appInfo;
    try {
      appInfo = JSON.parse(process.env.VCAP_APPLICATION || "{}");
    } catch (e) {
      logger.error("[Auto-Scaling Agent] Failed to parse process.env.VCAP_APPLICATION:" + process.env.VCAP_APPLICATION);
      logger.error("[Auto-Scaling Agent] Error:" + e);
      return null;
    }

    return appInfo;
  }

  utilObj.getServiceEnv = function() {
    var regex = /Auto(.*)Scaling/;
    var services;
    try {
      services = JSON.parse(process.env.VCAP_SERVICES || "{}");
    } catch (e) {
      logger.error("[Auto-Scaling Agent] Failed to parse process.env.VCAP_SERVICES:" + process.env.VCAP_SERVICES);
      logger.error("[Auto-Scaling Agent] Error:" + e);
      return null;
    }
    for (var key in services) {
      if (regex.test(key)) {
        return services[key][0]['credentials'];
      }
    }
    return null;
  }

  utilObj.parseUrlToHostPort = function(urlStr) {
    if (!urlStr) {
      logger.error("[Auto-Scaling Agent] service url is null or undefined");
      return null;
    }

    var result = new Array();
    var host = urlStr;
    var port = '443';
    var urlObj = url.parse(urlStr);
    if (urlObj.hostname) {
      host = urlObj.hostname;
    }
    if (urlObj.port) {
      port = urlObj.port;
    }
    result.push(host);
    result.push(port);
    return result;
  }
  utilObj.getCertificates = function(certPath) {
    if (!certPath) {
      return null;
    }
    if (!fs.existsSync(certPath)) {
      return null;
    }
    var status = fs.statSync(certPath);
    var ca = [];
    if (!status.isDirectory()) {
      ca.push(fs.readFileSync(certPath));
    } else {
      var files = fs.readdirSync(certPath);
      for (var i = 0; i < files.length; i++) {
        ca.push(fs.readFileSync(path.join(certPath, files[i])));
      }
    }
    return ca;
  }
  return utilObj;
}
